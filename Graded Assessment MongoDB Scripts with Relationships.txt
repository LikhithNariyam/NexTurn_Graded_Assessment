Part 1: Basic MongoDB Commands and Queries
1. Create the Collections and Insert Data:

db.customers.insertMany([
  { "_id": 1, "name": "Likhith", "email": "likhith.rao@gmail.com", "address": { "street": "12 Birch Rd", "city": "Eastvale", "zipcode": "43210" }, "phone": "555-1111", "registration_date": ISODate("2023-01-15T09:30:00Z") },
  { "_id": 2, "name": "Pranav", "email": "pranav.n@gmail.com", "address": { "street": "78 Cedar Ave", "city": "Harperville", "zipcode": "65432" }, "phone": "555-2222", "registration_date": ISODate("2023-02-18T11:20:00Z") },
  { "_id": 3, "name": "Eshwar", "email": "eshwar.gupta@gmail.com", "address": { "street": "34 Willow Ln", "city": "Laketon", "zipcode": "78901" }, "phone": "555-3333", "registration_date": ISODate("2023-03-21T15:45:00Z") },
  { "_id": 4, "name": "Lohith", "email": "lohith.k@gmail.com", "address": { "street": "56 Palm Blvd", "city": "Northdale", "zipcode": "98765" }, "phone": "555-4444", "registration_date": ISODate("2023-04-10T08:10:00Z") },
  { "_id": 5, "name": "Shashank", "email": "shashank.p@gmail.com", "address": { "street": "99 Aspen Dr", "city": "Brookfield", "zipcode": "23456" }, "phone": "555-5555", "registration_date": ISODate("2023-05-25T13:30:00Z") }
]);

db.orders.insertMany([
  { "_id": 1, "order_id": "ORD567890", "customer_id": 1, "order_date": ISODate("2023-06-05T12:30:00Z"), "status": "shipped", "items": [ { "product_name": "Gaming Console", "quantity": 1, "price": 400 }, { "product_name": "Controller", "quantity": 2, "price": 45 } ], "total_value": 490 },
  { "_id": 2, "order_id": "ORD567891", "customer_id": 2, "order_date": ISODate("2023-07-15T09:00:00Z"), "status": "delivered", "items": [ { "product_name": "Smartwatch", "quantity": 1, "price": 200 }, { "product_name": "Earbuds", "quantity": 1, "price": 60 } ], "total_value": 260 },
  { "_id": 3, "order_id": "ORD567892", "customer_id": 3, "order_date": ISODate("2023-08-18T17:00:00Z"), "status": "processing", "items": [ { "product_name": "4K Camera", "quantity": 1, "price": 350 } ], "total_value": 350 },
  { "_id": 4, "order_id": "ORD567893", "customer_id": 4, "order_date": ISODate("2023-09-10T15:00:00Z"), "status": "shipped", "items": [ { "product_name": "Wireless Speaker", "quantity": 1, "price": 120 }, { "product_name": "Portable Charger", "quantity": 1, "price": 30 } ], "total_value": 150 },
  { "_id": 5, "order_id": "ORD567894", "customer_id": 5, "order_date": ISODate("2023-10-05T13:20:00Z"), "status": "delivered", "items": [ { "product_name": "Tablet", "quantity": 1, "price": 550 } ], "total_value": 550 }
]);

2. Find Orders for a Specific Customer:

const customer = db.customers.findOne({ name: "Likhith" });
db.orders.find({ customer_id: customer._id });

3. Find the Customer for a Specific Order:

const order = db.orders.findOne({ order_id: "ORD567890" });
db.customers.findOne({ _id: order.customer_id });

4. Update Order Status:

db.orders.updateOne(
  { order_id: "ORD567890" },
  { $set: { status: "delivered" } }
);

5. Delete an Order:

db.orders.deleteOne({ order_id: "ORD567890" });

Part 2: Aggregation Pipeline

1. Calculate Total Value of All Orders by Customer:

db.orders.aggregate([
  { $group: { _id: "$customer_id", total_spent: { $sum: "$total_value" } } },
  { $lookup: { from: "customers", localField: "_id", foreignField: "_id", as: "customer_info" } },
  { $unwind: "$customer_info" },
  { $project: { "customer_info.name": 1, total_spent: 1 } }
]);

2.Group orders by their status:
db.orders.aggregate([
  { $group: { _id: "$status", count: { $sum: 1 } } }
]);

3. List Customers with Their Recent Orders:

db.orders.aggregate([
  { $sort: { order_date: -1 } },
  { $group: { _id: "$customer_id", most_recent_order: { $first: "$$ROOT" } } },
  { $lookup: { from: "customers", localField: "_id", foreignField: "_id", as: "customer_info" } },
  { $unwind: "$customer_info" },
  { $project: { "customer_info.name": 1, "customer_info.email": 1, most_recent_order: 1 } }
]);

4. Find the Most Expensive Order by Customer:
db.orders.aggregate([
  { $sort: { total_value: -1 } },
  { $group: { _id: "$customer_id", most_expensive_order: { $first: "$$ROOT" } } },
  { $lookup: { from: "customers", localField: "_id", foreignField: "_id", as: "customer_info" } },
  { $unwind: "$customer_info" },
  { $project: { "customer_info.name": 1, most_expensive_order: 1 } }
]);

Part 3: Real-World Scenario with Relationships

1. Find All Customers Who Placed Orders in the Last Month:

const recentDate = new Date();
recentDate.setDate(recentDate.getDate() - 30);

db.orders.aggregate([
  { $match: { order_date: { $gte: recentDate } } },
  { $sort: { order_date: -1 } },
  { $lookup: { from: "customers", localField: "customer_id", foreignField: "_id", as: "customer_info" } },
  { $unwind: "$customer_info" },
  { $project: { "customer_name": "$customer_info.name", "email": "$customer_info.email", "recent_order_date": "$order_date" } }
]);

2. Find All Products Ordered by a Specific Customer:

const specifiedCustomer = db.customers.findOne({ name: "Likhith" });
db.orders.aggregate([
  { $match: { customer_id: specifiedCustomer._id } },
  { $unwind: "$items" },
  { $group: { _id: "$items.product_name", total_quantity: { $sum: "$items.quantity" } } },
  { $project: { product_name: "$_id", total_quantity: 1 } }
]);

3. Find the Top 3 Customers with the Most Expensive Total Orders:

db.orders.aggregate([
  { $group: { _id: "$customer_id", total_spent: { $sum: "$total_value" } } },
  { $sort: { total_spent: -1 } },
  { $limit: 3 },
  { $lookup: { from: "customers", localField: "_id", foreignField: "_id", as: "customer_info" } },
  { $unwind: "$customer_info" },
  { $project: { "customer_name": "$customer_info.name", "email": "$customer_info.email", total_spent: 1 } }
]);

4. Add a New Order for an Existing Customer:

const selectedCustomer = db.customers.findOne({ name: "Pranav" });
db.orders.insertOne({
  order_id: "ORD567895",
  customer_id: selectedCustomer._id,
  order_date: new Date(),
  status: "processing",
  items: [
    { product_name: "Laptop", quantity: 1, price: 1200 },
    { product_name: "Webcam", quantity: 1, price: 80 }

Part 4: Bonus Challenge

1. Find Customers Who Have Not Placed Orders

db.customers.aggregate([
  {
    $lookup: {
      from: "orders",
      localField: "_id",
      foreignField: "customer_id",
      as: "orders"
    }
  },
  {
    $match: { orders: { $size: 0 } }
  },
  {
    $project: { name: 1, email: 1 }
  }
]);

2. Calculate the Average Number of Items Ordered per Order

db.orders.aggregate([
  {
    $project: {
      item_count: { $size: "$items" }
    }
  },
  {
    $group: {
      _id: null,
      avg_items_per_order: { $avg: "$item_count" }
    }
  },
  {
    $project: {
      _id: 0,
      avg_items_per_order: 1
    }
  }
]);

3. Join Customer and Order Data Using $lookup

db.customers.aggregate([
  {
    $lookup: {
      from: "orders",
      localField: "_id",
      foreignField: "customer_id",
      as: "order_details"
    }
  },
  {
    $unwind: "$order_details"
  },
  {
    $project: {
      name: 1,
      email: 1,
      order_id: "$order_details.order_id",
      order_total_value: "$order_details.total_value",
      order_date: "$order_details.order_date"
    }
  }
]);

